<?xml version="1.0"?>
<project name="NUnit" default="build" basedir=".">

<!-- ***************************************************************** -->
<!-- **********Set Properties used by Various targets **************** -->
<!-- ***************************************************************** -->

  <!-- Project base dir is nant project base dir -->
  <property name="project.base.dir"
    value="${project::get-base-directory()}"/>

  <!-- Other directories are derived from base dir -->
  <property name="project.build.dir" 
    value="${path::combine(project.base.dir,'build')}"/>
  <property name="project.package.dir" 
    value="${path::combine(project.base.dir,'package')}"/>
  <property name="project.src.dir"
    value="${path::combine(project.base.dir, 'src')}"/>
  <property name="project.doc.dir"
    value="${path::combine(project.base.dir,'doc')}"/>
  <property name="project.samples.dir"
    value="${path::combine(project.base.dir,'samples')}"/>
  <property name="project.solutions.dir"
    value="${path::combine(project.base.dir,'solutions')}"/>
  <property name="project.tools.dir"
    value="${path::combine(project.base.dir,'tools')}"/>
  <property name="project.lib.dir"
    value="${path::combine(project.base.dir,'lib')}"/>
  <property name="project.install.dir"
    value="${path::combine(project.base.dir, 'install')}"/>

  <!-- Set paths to various package directories -->
  <property name="package.working.dir" 
    value="${path::combine(project.package.dir,package.name)}"/>
  <property name="package.bin.dir" 
    value="${path::combine(package.working.dir,'bin')}"/>
  <property name="package.doc.dir" 
    value="${path::combine(package.working.dir,'doc')}"/>
  <property name="package.samples.dir" 
    value="${path::combine(package.working.dir,'samples')}"/>
  <property name="package.src.dir" 
    value="${path::combine(package.working.dir,'src')}"/>
  <property name="package.lib.dir" 
    value="${path::combine(package.working.dir,'lib')}"/>
  <property name="package.solutions.dir"
    value="${path::combine(package.working.dir,'solutions')}"/>
  <property name="package.tools.dir"
    value="${path::combine(package.working.dir,'tools')}"/>
  <property name="package.resource.dir"
    value="${path::combine(package.working.dir,'resources')}"/>
  <property name="package.install.dir"
    value="${path::combine(package.working.dir,'install')}"/>

  <!-- Default build configuration -->
  <property name="build.config" value="debug"/>
  <property name="build.defines" value=""/>

  <!-- sdk-exists causes an error if the framework is not installed! -->
  <!-- Default runtime configuration -->
  <foreach item="String" delim="," 
      property="framework" in="${supported.frameworks}">
    <if test="${framework::exists( framework )}">
    <if test="${framework::sdk-exists( framework )}">
      <property name="installed.frameworks" value="${installed.frameworks},${framework}"
        if="${property::exists('installed.frameworks')}"/>
      <property name="installed.frameworks" value="${framework}"
        unless="${property::exists('installed.frameworks')}"/>
      <property name="default.runtime" value="${framework}"
        unless="${property::exists('default.runtime')}"/>
      <property name="default.net.runtime" value="${framework}"
        if="${string::starts-with(framework,'net')}"
        unless="${property::exists('default.net.runtime')}"/>
      <property name="default.mono.runtime" value="${framework}"
        if="${string::starts-with(framework,'mono')}"
        unless="${property::exists('default.mono.runtime')}"/>
    </if>
    </if>
  </foreach>

  <call target="set-${default.runtime}-runtime-config" />

  <call target="set-default-package-config" />

<!-- ***************************************************************** -->
<!-- ********* Targets for setting the build configuration *********** -->
<!-- ***************************************************************** -->

  <target name="set-build-config" description="Set the build config">
    <call target="set-${build.config}-build-config"/>
  </target>

  <target name="set-debug-build-config">
    <property name="build.config" value="debug"/>
    <property name="build.debug" value="true"/>
    <property name="build.defines" value="DEBUG,TRACE,${runtime.defines}"
        dynamic="true"/>
    <property name="build.suffix" value="-dbg"/>
  </target>
	
  <target name="set-release-build-config">
    <property name="build.config" value="release"/>
    <property name="build.debug" value="false"/>
    <property name="build.defines" value="TRACE,${runtime.defines}"
	dynamic="true"/>
    <property name="build.suffix" value=""/>
  </target>

<!-- ***************************************************************** -->
<!-- ***    Targets for setting the runtime configuration          *** -->
<!-- ***************************************************************** -->

  <target name="set-runtime-config">   
    <call target="set-${runtime.config}-runtime-config"/>
  </target>
  
  <target name="set-default-dot-net-runtime-config">
    <fail unless="${property::exists( 'default.net.runtime' )}"
      message="No versions of the .NET SDK were found"/>

    <call target="set-${default.net.runtime}-runtime-config" />
  </target>

  <target name="set-default-mono-runtime-config">
    <fail unless="${property::exists( 'default.mono.runtime' )}"
      message="No versions of the Mono runtime were found"/>

    <call target="set-${default.mono.runtime}-runtime-config" />
  </target>

  <target name="set-net-1.0-runtime-config">
    <fail unless="${framework::exists('net-1.0') and framework::sdk-exists('net-1.0')}"
      message="The .NET 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="net-1.0"/>
    <property name="runtime.defines" value="MSNET,NET_1_0"/>
    <property name="runtime.testproj" value="NUnitTests.v1.nunit"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="build.x86" value="false"/>
    <property name="build.gui" value="false"/>
    <property name="nant.settings.currentframework" 
      value="net-1.0"/>
    <property name="supported.test.platforms" 
      value="net-1.0,net-1.1,net-2.0,mono-1.0,mono-2.0"/>
  </target>
	
  <target name="set-net-1.1-runtime-config">
    <fail unless="${framework::exists('net-1.1') and framework::sdk-exists('net-1.1')}"
      message="The .NET 1.1 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="1.1"/>
    <property name="runtime.config" value="net-1.1"/>
    <property name="runtime.defines" value="MSNET,NET_1_1"/>
    <property name="runtime.testproj" value="NUnitTests.v1.nunit"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="build.x86" value="false"/>
    <property name="build.gui" value="false"/>
    <property name="nant.settings.currentframework" 
      value="net-1.1"/>
    <property name="supported.test.platforms"
      value="net-1.0,net-1.1,net-2.0,mono-1.0,mono-2.0"/>
  </target>
	
  <target name="set-net-2.0-runtime-config">
    <fail unless="${framework::exists('net-2.0') and framework::sdk-exists('net-2.0')}"
      message="The .NET 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="2.0"/>
    <property name="runtime.config" value="net-2.0"/>
    <property name="runtime.defines" value="MSNET,NET_2_0"/>
    <property name="runtime.testproj" value="NUnitTests.v2.nunit"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="build.x86" value="true"/>
    <property name="build.gui" value="true"/>
    <property name="nant.settings.currentframework" 
      value="net-2.0"/>
    <property name="supported.test.platforms" value="net-2.0,mono-2.0"/>
  </target>
   
<!--     
  <target name="set-net-3.0-runtime-config">
    <fail unless="${framework::exists('net-3.0') and framework::sdk-exists('net-3.0')}"
      message="The .NET 3.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="3.0"/>
    <property name="runtime.config" value="net-3.0"/>
    <property name="runtime.defines" value="MSNET,NET_3_0"/>
    <property name="runtime.testproj" value="NUnitTests.v2.nunit"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="build.x86" value="true"/>
    <property name="build.gui" value="true"/>
    <property name="nant.settings.currentframework" 
      value="net-3.0"/>
    <property name="supported.test.platforms" value="net-2.0,mono-2.0"/>
  </target>
-->
	
  <target name="set-net-3.5-runtime-config">
    <fail unless="${framework::exists('net-3.5') and framework::sdk-exists('net-3.5')}"
      message="The .NET 3.5 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="3.5"/>
    <property name="runtime.config" value="net-3.5"/>
    <property name="runtime.defines" value="MSNET,NET_2_0,CS_3_0"/>
    <property name="runtime.testproj" value="NUnitTests.v2.nunit"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="build.x86" value="true"/>
    <property name="build.gui" value="true"/>
    <property name="nant.settings.currentframework" 
      value="net-3.5"/>
    <property name="supported.test.platforms" value="net-3.5,mono-3.5"/>
  </target>
 	
  <target name="set-net-4.0-runtime-config">
    <fail unless="${framework::exists('net-4.0') and framework::sdk-exists('net-4.0')}"
      message="The .NET 4.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="4.0"/>
    <property name="runtime.config" value="net-4.0"/>
    <property name="runtime.defines" value="MSNET,NET_2_0,CS_3_0"/>
    <property name="runtime.testproj" value="NUnitTests.v2.nunit"/>
    <property name="build.mono" value="false"/>
    <property name="build.win32" value="true"/>
    <property name="build.x86" value="true"/>
    <property name="build.gui" value="true"/>
    <property name="nant.settings.currentframework" 
      value="net-4.0"/>
    <property name="supported.test.platforms" value="net-4.0"/>
  </target>
 	
  <target name="set-mono-1.0-runtime-config">
    <fail unless="${framework::exists('mono-1.0') and framework::sdk-exists('mono-1.0')}"
      message="The Mono 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="mono"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="mono-1.0"/>
    <property name="runtime.defines" value="MONO,NET_1_1"/>
    <property name="runtime.testproj" value="NUnitTests.v1.nunit"/>
    <property name="build.mono" value="true"/>
    <property name="build.win32" value="false"/>
    <property name="build.x86" value="false"/>
    <property name="build.gui" value="false"/>
    <property name="nant.settings.currentframework" 
      value="mono-1.0"/>
    <property name="supported.test.platforms"
      value="mono-1.0,mono-2.0,net-1.0,net-1.1,net-2.0"/>
  </target>

  <target name="set-mono-2.0-runtime-config">
    <fail unless="${framework::exists('mono-2.0') and framework::sdk-exists('mono-2.0')}"
      message="The Mono 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="mono"/>
    <property name="runtime.version" value="2.0"/>
    <property name="runtime.config" value="mono-2.0"/>
    <property name="runtime.defines" value="MONO,NET_2_0"/>
    <property name="build.mono" value="true"/>
    <property name="runtime.testproj" value="NUnitTests.v2.nunit"/>
    <property name="build.win32" value="false"/>
    <property name="build.x86" value="true"/>
    <property name="build.gui" value="true"/>
    <property name="nant.settings.currentframework" 
      value="mono-2.0"/>
    <property name="supported.test.platforms" value="mono-2.0,net-2.0"/>
  </target>

<!-- ***************************************************************** -->
<!-- ***    Targets for setting the package configuration          *** -->
<!-- ***************************************************************** -->

  <target name="set-package-config">   
    <call target="set-${package.config}-package-config"/>
  </target>

  <target name="set-default-package-config">
    <call target="set-${default.package.config}-package-config"/>
  </target>
  
  <target name="set-std-package-config">
    <property name="package.config" value="std"/>
    <property name="package.runtimes" value="net-1.1+net-2.0"/>
    <property name="create.msi" value="true"/>
  </target>

  <target name="set-mono-package-config">
    <property name="package.config" value="mono"/>
    <property name="package.runtimes" value="mono-1.0+mono-2.0"/>
    <property name="create.msi" value="false"/>
  </target>

<!-- ***************************************************************** -->
<!-- **************** Internally used targets ************************ -->
<!-- ***************************************************************** -->

  <!-- Set up the build directory -->
  <target name="set-build-dir"
    depends="set-build-config,set-runtime-config">

    <property name="runtime.platform.dir"
      value="${path::combine(project.build.dir,runtime.platform)}"/>
    <property name="runtime.version.dir"
      value="${path::combine(runtime.platform.dir,runtime.version)}"/>
    <property name="current.build.dir" 
      value="${path::combine(runtime.version.dir,build.config)}"/>
    <property name="current.lib.dir" 
      value="${path::combine(current.build.dir,'lib')}"/>
    <property name="current.test.dir" 
      value="${path::combine(current.build.dir,'tests')}"/>
    <property name="current.framework.dir" 
      value="${path::combine(current.build.dir,'framework')}"/>

<!--    <property name="package.bin.dir" 
      value="${path::combine(package.working.dir,runtime.config)}"/>-->
  </target>
  
  <target name="make-build-dir" depends="set-build-dir">
    <mkdir dir="${current.build.dir}"
      unless="${directory::exists(current.build.dir)}"/>
    <mkdir dir="${current.lib.dir}"
      unless="${directory::exists(current.lib.dir)}"/>
    <mkdir dir="${current.framework.dir}"
      unless="${directory::exists(current.framework.dir)}"/>
    <mkdir dir="${current.test.dir}"
      unless="${directory::exists(current.test.dir)}"/>
  </target>

<!-- ***************************************************************** -->
<!-- ***               Display Today's Build Number                *** -->
<!-- ***************************************************************** -->

  <target name="build-number">
    <echo message="Today's build number is ${package.build.number}"/>
  </target>

<!-- ***************************************************************** -->
<!-- ***           Dump configuration settings for debugging       *** -->
<!-- ***************************************************************** -->

  <target name="dump-settings" depends="set-build-dir">

    <echo>Project Directories</echo>
    <echo>  Base:      ${project.base.dir}</echo>
    <echo>   Doc:      ${project.doc.dir}</echo>
    <echo>   Samples:  ${project.samples.dir}</echo>
    <echo>   Source:   ${project.src.dir}</echo>
    <echo>   Build:    ${project.build.dir}</echo>
    <echo>   Package:  ${project.package.dir}</echo>
    <echo>   Tools:    ${project.tools.dir}</echo>
    <echo></echo>
    <echo>Runtime Versions</echo>
    <echo>  Supported: ${supported.frameworks}</echo>
    <echo>  Installed: ${installed.frameworks}</echo>
    <echo>  Default:   ${default.runtime}</echo>
    <if test="${property::exists('default.net.runtime')}">
    <echo>    .Net:    ${default.net.runtime}</echo>
    </if>
    <if test="${not property::exists('default.net.runtime')}">
    <echo>    .Net:    (none)</echo>
    </if>
    <if test="${property::exists('default.mono.runtime')}">
    <echo>    Mono:    ${default.mono.runtime}</echo>
    </if>
    <if test="${not property::exists('default.mono.runtime')}">
    <echo>    Mono:    (none)</echo>
    </if>
    <echo></echo>
    <echo>Current Build Settings</echo>
    <echo>  Config:    ${build.config}</echo>
    <echo>  Runtime:   ${runtime.config}</echo>
    <echo>  Build Dir: ${current.build.dir}</echo>
    <echo>  Defines:   ${build.defines}</echo>
    <echo></echo>
    <echo>Test Platforms for Current Build</echo>
    <echo>  Supported: ${supported.test.platforms}</echo>
    <echo></echo>
    <echo>Packaging</echo>
    <echo>  Name:      ${package.name}</echo>
    <echo>  Version:   ${package.version}</echo>
    <echo>  Work Dir:  ${package.working.dir}</echo>
    <echo>   Bin:      ${package.bin.dir}</echo>
    <echo>   Doc:      ${package.doc.dir}</echo>
    <echo>   Samples:  ${package.samples.dir}</echo>
    <echo>   Source:   ${package.src.dir}</echo>
    <echo></echo>
    <echo>Current Framework and SDK Directories</echo>
    <echo>  ${framework::get-framework-directory(framework::get-target-framework())}</echo>
    <echo>  ${framework::get-sdk-directory(framework::get-target-framework())}</echo>

  </target>

</project>